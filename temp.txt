Scope of Work and responsibilities of Database Administrator

1) Support for various existing Oracle and SQL Database OS platforms.

2) Installing Oracle Database/Client software and creation of the database.

3) Installing SQL Database software and creation of the database.

4) DR Site Creation.

5) Database Administration/Monitoring of existing platforms.

6) Monitoring and tuning all database servers (DC,DR and Near DR).

7) Creating User groups, tables and profiles.

8) Performance fine-tuning and smooth functioning.

9) Pro-actively monitoring the database's health and taking preventive or corrective action as required.

10) Creating and maintaining all database objects, including tables, clusters, indexes, views, sequences, function, packages and procedures.

11) Enforces and maintains database constraints to ensure integrity of the database.

12) Implementing and maintaining regular backup (RMAN/EXPDP) procedures. Coordinating with necessary software vendors.

13) Making database Backup and Restoration using RMAN and Data pump method and performing recovery when necessary.

14) Refresh Database periodically for Development purpose (UAT).

15) DR-Drill activity.

16) Database shut-down/Start-up/Fail-over/snapshot standby steps.

17) Regularly shut-down/reboot database for fine tuning as per industry standard.

18) Disk and data file addition as and when required.

19) Regular archive deletion.

20) Storage/Disk Management(Table spaces, ASM Disk, OS mount Point)

21) Manage the size and file of the database schema objects.

22) Importing, Exporting and distributing Data. 23) Regular indexing and stat gather of all database.

24) Log shipping (DC-DR and Near DR). Monitoring MIS activities

25) Up-gradation of database (oracle latest Opatches) with help of oracle support site.

26) Database security Apply Critical patches

27) SR Creation and follow-up with Oracle support

28) Managing Devices & Databases, User Accounts, access rights, resources.

29) Scheduling tasks and alerts.

30) Generation of MIS reports and evaluation sheet.

31) Implementation/Support and Functionality for all the activities related with Database.

32) Implementation of audit recommendations.

33) Regular Data purging.

34) AWR/stat pack reports

=TRIM(RIGHT(A1, LEN(A1) - FIND("#", SUBSTITUTE(A1, "/", "#", LEN(A1) - LEN(SUBSTITUTE(A1, "/", ""))))))

20.03.2025

CREATE TABLE DESIGNATIONS (
    designation_id NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    designation    VARCHAR2(50) UNIQUE NOT NULL,
    approval_level NUMBER NOT NULL -- Determines the approval order
);

CREATE TABLE USERS (
    user_id        NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    username       VARCHAR2(50) UNIQUE NOT NULL,
    full_name      VARCHAR2(100) NOT NULL,
    email          VARCHAR2(100) UNIQUE NOT NULL,
    password       VARCHAR2(200) NOT NULL, -- Hashed
    designation_id NUMBER, -- Foreign Key
    created_by     NUMBER,
    created_at     DATE DEFAULT SYSDATE,
    status         VARCHAR2(20) CHECK (status IN ('PENDING', 'APPROVED', 'REJECTED')) DEFAULT 'PENDING',
    FOREIGN KEY (designation_id) REFERENCES DESIGNATIONS(designation_id),
    FOREIGN KEY (created_by) REFERENCES USERS(user_id)
);

CREATE TABLE APPROVAL_REQUESTS (
    request_id     NUMBER GENERATED ALWAYS AS IDENTITY PRIMARY KEY,
    user_id        NUMBER, -- Affected user
    action         VARCHAR2(20) CHECK (action IN ('CREATE', 'UPDATE', 'DELETE')),
    requested_by   NUMBER, -- Maker
    current_level  NUMBER, -- Current approval level
    max_level      NUMBER, -- Final approval level
    status         VARCHAR2(20) CHECK (status IN ('PENDING', 'APPROVED', 'REJECTED')) DEFAULT 'PENDING',
    approved_by    NUMBER, -- Approver at current level
    approved_at    DATE,
    FOREIGN KEY (user_id) REFERENCES USERS(user_id),
    FOREIGN KEY (requested_by) REFERENCES USERS(user_id),
    FOREIGN KEY (approved_by) REFERENCES USERS(user_id)
);


DECLARE
    v_max_level NUMBER;
BEGIN
    -- Get max approval level for the requested user's designation
    SELECT approval_level INTO v_max_level 
    FROM DESIGNATIONS 
    WHERE designation_id = :P1_DESIGNATION_ID;

    -- Insert new approval request
    INSERT INTO APPROVAL_REQUESTS (user_id, action, requested_by, current_level, max_level, status)
    VALUES (:P1_USER_ID, 'CREATE', :APP_USER, 1, v_max_level, 'PENDING');
    
    COMMIT;
END;




DECLARE
    v_next_level NUMBER;
BEGIN
    -- Get the next approval level
    SELECT current_level + 1 INTO v_next_level 
    FROM APPROVAL_REQUESTS 
    WHERE request_id = :P2_REQUEST_ID;

    IF v_next_level <= (SELECT max_level FROM APPROVAL_REQUESTS WHERE request_id = :P2_REQUEST_ID) THEN
        -- Move to next approval level
        UPDATE APPROVAL_REQUESTS 
        SET current_level = v_next_level, approved_by = :APP_USER, approved_at = SYSDATE
        WHERE request_id = :P2_REQUEST_ID;
    ELSE
        -- Final approval, mark as approved
        UPDATE APPROVAL_REQUESTS 
        SET status = 'APPROVED', approved_by = :APP_USER, approved_at = SYSDATE
        WHERE request_id = :P2_REQUEST_ID;
        
        -- Update user status
        UPDATE USERS SET status = 'APPROVED' WHERE user_id = 
            (SELECT user_id FROM APPROVAL_REQUESTS WHERE request_id = :P2_REQUEST_ID);
    END IF;
    
    COMMIT;
END;
UPDATE APPROVAL_REQUESTS 
SET status = 'APPROVED', approved_by = :APP_USER, approved_at = SYSDATE 
WHERE request_id = :P3_REQUEST_ID;

UPDATE USERS SET status = 'APPROVED' 
WHERE user_id = (SELECT user_id FROM APPROVAL_REQUESTS WHERE request_id = :P3_REQUEST_ID);

COMMIT;



CREATE OR REPLACE FUNCTION CHECK_LOGIN (
    p_username VARCHAR2,
    p_password VARCHAR2
) RETURN BOOLEAN IS
    v_stored_password VARCHAR2(200);
    v_user_status VARCHAR2(20);
BEGIN
    -- Get hashed password and user status
    SELECT password, status INTO v_stored_password, v_user_status
    FROM USERS
    WHERE username = p_username;
    
    -- Check if user is approved
    IF v_user_status <> 'APPROVED' THEN
        RETURN FALSE; -- User not approved, cannot log in
    END IF;

    -- Compare passwords (Assuming passwords are stored hashed)
    IF v_stored_password = p_password THEN  -- Replace with hash comparison in production
        RETURN TRUE; -- Login success
    ELSE
        RETURN FALSE; -- Incorrect password
    END IF;

EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RETURN FALSE; -- User not found
    WHEN OTHERS THEN
        RETURN FALSE; -- Any other error
END CHECK_LOGIN;
/